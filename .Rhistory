View(a)
a$V1
summary(a)
View(a)
summary(sample)
sample <- read.csv("~/Desktop/sample csv.csv", header=F)
View(sample)
t.test(sample$V1,sample$V2)
sample <- read.csv("~/Desktop/sample csv.csv", header=F)
View(sample)
t.test(sample$V1,sample$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
a<-str(a)
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> str(a)
a<-as.data.frame(a)
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
t.test(a$V1,a$V2)
str(a)
str(a)
traceback()
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
a<-as.data.frame(a)
t.test(a$V1,a$V2)
View(a)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
View(a)
a<-as.data.frame(a)
t.test(a$V1,a$V2)
View(a)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
a<-as.data.frame(a)
t.test(a$V1,a$V2)
a
sample
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
View(a)
a
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
a
a<-as.data.frame(a)
a
class(a[,1])
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
View(a)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
View(a)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
cor(a)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
cor(a)
library(psych)
cor.test(a)
cor.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
cor.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
t.test(a$V1,a$V2)
cor.test(a$V1,a$V2)
t.test(a$V1,a$V2)
library(psych)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
cor.test(a$V1,a$V2)
t.test(a$V1,a$V2)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
cor.test(a$V1,a$V2)
cor(a$V1,a$V2,method='spearman')
library(psych)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
cor.test(a$V1,a$V2)
t.test(a$V1,a$V2)
View(a)
cor(a)
library(psych)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
cor.test(a$V1,a$V2)
t.test(a$V1,a$V2)
cor(a)
library(psych)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
cor.test(a$V1,a$V2)
t.test(a$V1,a$V2)
cor.test(a)
cor(a)
library(psych)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
cor.test(a$V1,a$V2)
t.test(a$V1,a$V2)
cor.test(a)
cor(a)
d <- read.csv("~/Documents/R Scripts/Data/Decay function.csv")
plot(d)
m.users <- lm(log(d$y) ~ log(d$x), data = d);
m.users
x<-1:365
plot(x,exp(-0.9435*log(x)+11.8864 ),type="l",main="Fitting power law to 30 days of sample data",xlab="days",ylab="users triggered")
lines(d$x,d$y, col='red');
report_params['user_id']=590170571
report_params['user_id']<-590170571
library(psych)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
cor.test(a$V1,a$V2)
t.test(a$V1,a$V2)
A <- read.csv("~/Documents/R Scripts/Data/msgs_1.csv")
View(A)
B <- read.csv("~/Documents/R Scripts/Data/msgs_2.csv")
View(B)
library(psych)
cor.test(A$lng_msgs,B$ln_msgs)
T.test(A$lng_msgs,B$ln_msgs)
t.test(A$lng_msgs,B$ln_msgs)
for (i in 1:ncol(A)) { A[,i] <- as.numeric(as.character(A[,i]))}
for (i in 1:ncol(B)) { B[,i] <- as.numeric(as.character(B[,i]))}
t.test(A$lng_msgs,B$ln_msgs)
View(A)
View(B)
View(B)
t.test(A$ln_msgs,B$ln_msgs)
hist(A$ln_msgs)
hist(A$ln_msgs)
hist(B$ln_msgs)
hist(10^A$ln_msgs)
hist(10^(A$ln_msgs)
;
hist(10^(A$ln_msgs),breaks = 50,col = 3, freq=TRUE)
hist(10^(A$ln_msgs),breaks = 250,col = 3, freq=TRUE)
A$ln_msgs<-(10^A$ln_msgs)
hist(A$ln_msgs)
View(A)
A$msgs<-(10^A$ln_msgs)
View(A)
View(A)
C <- read.csv("~/Documents/R Scripts/Data/msgs_norm.csv")
View(C)
hist(10^(C$ln_msgs),breaks = 50,col = 3, freq=TRUE)
C <- read.csv("~/Documents/R Scripts/Data/msgs_norm.csv")
View(C)
fb<- read.csv("~/Documents/R Scripts/Data/msgs_norm.csv")
View(C)
View(C)
hist(fb$ln_msgs,breaks = 100,col = 3, freq=TRUE, main = 'Facebook Friends per User', xlab = 'Friends', ylab='# of Friends')
tab <- table(fb$ln_msgs)
tab2 <- as.data.frame(cbind(as.integer(names(tab)), as.integer(tab)))
str(tab2)
plot(log(tab2$V1 ), log(tab2$V2 ), type = "l", lwd = 3, xlab="Log of friend count",ylab="Log of # of users", main="Log-Log of # Friends Per User")
plot(log(tab2$V1 ), log(tab2$V2 ), type = "l", lwd = 3, xlab="Log of Messages",ylab="Log of # of users", main="Log-Log of Tagged Messages Per User")
hist(fb$ln_msgs,breaks = 100,col = 3, freq=TRUE, main = 'Facebook Friends per User', xlab = 'Friends', ylab='# of Friends')
hist(
fb$ln_msgs[order(fb$ln_msgs)][1:floor(length(fb$ln_msgs)*0.98)]
,breaks = 100,col = 3, freq=TRUE, main = 'Facebook Friends per User', xlab = 'Friends', ylab='# of Friends')
hist(
fb$ln_msgs[order(fb$ln_msgs)][1:floor(length(fb$ln_msgs)*0.98)]
,breaks = 100,col = 3, freq=TRUE, main = 'Frequency of Tagged Messages Per User', xlab = 'Messages', ylab='# of Users')
library(psych)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
cor.test(a$V1,a$V2)
t.test(a$V1,a$V2)
hist(a)
hist(a$V1)
View(a)
C <- read.csv("~/Documents/R Scripts/Data/msgss.csv")
View(C)
hist(C)
hist(C$msgs)
library(psych)
do.call('rbind', lapply(readLines(pipe('pbpaste')), function(i) strsplit(i, '\t')[[1]])) -> a
a<-as.data.frame(a)
for (i in 1:ncol(a)) { a[,i] <- as.numeric(as.character(a[,i]))}
cor.test(a$V1,a$V2)
t.test(a$V1,a$V2)
hist(a$V1)
hist(a$V1,breaks = 100,col = 3, freq=TRUE)
hist(a$V1,breaks = 50,col = 3, freq=TRUE)
30
hist(a$V1,breaks = 30,col = 3, freq=TRUE)
hist(a$V1,breaks = 20,col = 3, freq=TRUE)
hist(a$V1,breaks = 20,col = 3, freq=TRUE. main="Frequency of Average Messages per User Per Day")
hist(a$V1,breaks = 20,col = 3, freq=TRUE, main="Frequency of Average Messages per User Per Day")
hist(a$V1,breaks = 20,col = 3, freq=TRUE, main="Frequency of Average Messages per User Per Day",xlab="Messages")
View(A)
View(A)
View(B)
View(C)
plot(C)
hist(C)
for (i in 1:ncol(C)) { C[,i] <- as.numeric(as.character(C[,i]))}
hist(C)
View(C)
View(C$msgs)
hist(C$msgs)
tab <- table(C$msgs)
tab2 <- as.data.frame(cbind(as.integer(names(tab)), as.integer(tab)))
View(tab2)
View(tab2)
m.users <- lm(log(tab$V2) ~ log(tab$V1), data = C);
m.users <- lm(log(tab$V1) ~ log(tab$V2), data = C);
m.users <- lm(as.numeric(log(tab$V2)) ~ log(as.numeric(tab$V1)), data = C);
### This file has a series of utility functions, followed by the solution to ticket 24257 ###
### Annotated by a bunch of asterisks ###
### By Erik Gregory ###
### 2013-04-11 ###
getwd()
setwd('/Users/shill/documents/R scripts')
library(multicore)
require(RPostgreSQL)
library(chron)
library(plyr)
library(forecast)
library(inline)
#' @param user your username for the greenplum database
#' @param password your password
#' @param dbnam, default "prod"
#' @param host default "gp.tagged.com"
#' @param port port of the database on the host
#' @param driver the type of database driver to use
makeCxn <- function(user = "egregory", password = "egregory",
dbname = "prod", host = "gp.tagged.com",
port = 5432, driver = "PostgreSQL") {
drv <- dbDriver(driver)
cxn <- dbConnect(drv, user = user, password = password,
dbname = dbname, host = host, port = port)
cxn
}
#'@author Rober McGehee
#'@source https://stat.ethz.ch/pipermail/r-sig-db/2010q3/000868.html
dbInsert <- function(con, name, value, row.names = TRUE, ...) {
xx <- dbSendQuery(con, paste("select * from", name, "LIMIT 1;"))
cols <- dbColumnInfo(xx)$name
dbClearResult(xx)
if (row.names) {
if (!"row_names" %in% cols) stop("row_names column missing from
", sQuote(name))
value[["row_names", exact=TRUE]] <- rownames(value)
}
if (length(setdiff(names(value), cols)))
stop("names of 'value' do not match columns of ", sQuote(name))
cdt  <- which(sapply(value, inherits, c("Date", "POSIXt")))
ctxt <- which(sapply(value, postgresqlDataType)=="text")
for (i in cdt)
value[[i]] <- ifelse(is.na(value[[i]]), "NULL",
sQuote(format(value[[i]])))
for (i in setdiff(ctxt, cdt))
value[[i]] <- ifelse(is.na(value[[i]]), "NULL",
sQuote(value[[i]]))
m <- as.matrix(value)
class(m) <- "character"
m[is.na(m)] <- "NULL"
q1 <- paste("BEGIN; INSERT INTO", name, "(", paste(names(value),
collapse=", "), ") VALUES")
q2 <- apply(m, 1, function(x) paste("(", paste(x, collapse=","),
")", sep=""))
q3 <- "; COMMIT;"
qry <- paste(q1, paste(q2, collapse=","), q3)
dbGetQuery(con, qry)
}
#' @param query the query you want to make to the SQL connection you've specified
#' @param user your username for the greenplum database
#' @param password your password
#' @param dbnam, default "prod"
#' @param host default "gp.tagged.com"
#' @param port port of the database on the host
#' @param driver the type of database driver to use
fetchQuery <- function(query, user = "egregory", password = "egregory",
dbname = "prod", host = "gp.tagged.com",
port = 5432, n = -1, verbose = TRUE) {
res <- NA
cxn <- makeCxn(user = user, password = password,
dbname = dbname, host = host, port = port)
t1 <- Sys.time()
tmp <- try(dbSendQuery(cxn, query))
if (!('try-error' %in% class(tmp))) {
res <- try(fetch(tmp, n))
if (verbose) {
print(Sys.time() - t1)
print(dim(res))
}
}
dbDisconnect(cxn)
res
}
#'@example {
#'a <- "CREATE TABLE sandbox.test_r_insert(user_id numeric(15, 0), dt date)"
#'tst <- fetchQuery(a)
#'datas <- data.frame(user_id = 0:10, dt = seq(as.Date('2012-01-01'), as.Date('2012-01-10'), "days"))}
insertData <- function(name, value, user = "egregory", password = "egregory",
dbname = "prod", host = "gp.tagged.com",
port = 5432, n = -1, verbose = TRUE) {
cxn <- makeCxn(user = user, password = password,
dbname = dbname, host = host, port = port)
t1 <- Sys.time()
res <- try(dbWriteTable(conn = cxn, name = name, value = value, row.names = FALSE, overwrite = TRUE))
if (verbose) {
print(Sys.time() - t1)
print(dim(res))
}
dbDisconnect(cxn)
res
}
getTables <- function(user = "egregory", password = "egregory",
dbname = "prod", host = "gp.tagged.com",
port = 5432) {
a <- makeCxn(user = user, password = password,
dbname = dbname, host = host, port = port)
tbls <- dbListTables(a)
dbDisconnect(a)
tbls
}
getFields <- function(tables, user = "egregory", password = "egregory",
dbname = "prod", host = "gp.tagged.com",
port = 5432) {
a <- makeCxn(user = user, password = password,
dbname = dbname, host = host, port = port)
tbls <- lapply(tables, function(i) try(dbListFields(a, i)))
names(tbls) <- tables
dbDisconnect(a)
tbls
}
searchTables <- function(str) {
all.tbls[grep(str, all.tbls)]
}
searchTbls <- function(str) {
tbls[grep(str, tbls)]
}
queryByDateRange <- function(query, min.date = as.character(Sys.Date() - 1), max.date = NULL) {
if (is.null(max.date)) {
max.date <- min.date
}
dates <- as.character(seq(as.Date(min.date), as.Date(max.date) + 1, 'day'))
N <- length(dates)
res <- list()
for (i in 1:(N - 1)) {
str.start <- paste("DATE('", dates[i], "') ", sep = "")
str.end <- paste("DATE('", dates[i + 1], "') ", sep = "")
tmp.query <- gsub(":start_date", str.start, query, fixed = TRUE)
tmp.query <- gsub(":end_date", str.end, tmp.query, fixed = TRUE)
cat(tmp.query)
res[[dates[i]]] <- fetchQuery(tmp.query)
}
res
}
addColumns <- function(df, outlier.thresh = 0.10, time.unit = "mins", min_dt = NULL) {
if (!("POSIXct" %in% class(df$dt))) {
df$dt <- as.POSIXct(df$dt)
}
df$weekday <- factor(weekdays(df$dt))
df$minute <- factor(minutes(df$dt))
df$hour <- factor((hours(df$dt) - 8) %% 24)
df$minute_of_day <- factor(as.numeric(as.character(df$hour))*60 + as.numeric(as.character(df$minute)))
df <- df[order(df$dt), ]
if (df$dt[1] - df$dt[2] == structure(-1, tzone = "", units = "mins", class = "difftime")) {
if ("median.value" %in% names(df)) { # If we already have median values
}
df <- ddply(df, c('weekday', 'hour', 'minute'), transform,
median.value = median(value)) # Add medians for each weekday/minute combo
}
else {
df <- ddply(df, c('weekday', 'hour'), transform,
median.value = median(value)) # Add medians for each weekday/hour combo
}
df <- transform(df, dev = (value - median.value)/median.value)
df$outlier <- ifelse(abs(df$dev) > outlier.thresh, TRUE, FALSE)
if (is.null(min_dt)) {
min_dt <- min(df$dt)
}
df$time_id <- round(difftime(df$dt, min_dt, unit = time.unit))
df <- df[order(df$dt), ]
df
}
# Oracle port number 1521
# dbname taganalysis
# user taganalysis
# password $taganalysis$
# host 10.15.40.120
# ana_metrics table
all.tbls <- getTables()
tbls <- gsub('[0-9]+', '', all.tbls)
tbls <- unique(tbls)
####### Ticket 24257 ######
fetchQuery('GRANT ALL PRIVILEGES ON sandbox_sjh_pushtest1 to egregory', user = 'gploader', password = 'gploader')
fetchQuery('GRANT ALL PRIVILEGES ON sandbox.sjh_pushtest1 to egregory', user = 'gploader', password = 'gploader')
